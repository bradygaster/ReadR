@page "/"
@page "/category/{CategoryName}"
@page "/feed/{FeedUrl}"
@inject IHomePageService HomePageService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IDisposable
@rendermode @(new InteractiveServerRenderMode())
@using ReadR.Frontend.Models
@using ReadR.Frontend.ViewModels
@using ReadR.Frontend.Services

<PageTitle>@viewModel.GetPageTitle() - ReadR</PageTitle>

<div class="app-container">
    <!-- Sidebar Navigation -->
    <div class="sidebar">
        <div class="sidebar-header">
            <h2 class="sidebar-title">ReadR</h2>
        </div>
        
        <nav class="sidebar-nav">
            <div class="nav-item">
                <a class="nav-link @GetActiveClass("")" href="/" @onclick="@(() => HandleNavigation(null, null))" @onclick:preventDefault="true">
                    <span class="nav-icon">🏠</span> All Posts
                </a>
            </div>
            
            @if (viewModel.IsLoading)
            {
                <div class="nav-item">
                    <div class="nav-link">
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        Loading feeds...
                    </div>
                </div>
            }
            else if (viewModel.Categories?.Categories?.Any() == true)
            {
                @foreach (var category in viewModel.Categories.Categories)
                {
                    <div class="nav-category">
                        <div class="nav-item">
                            <a class="nav-link category-link @GetActiveClass($"/category/{Uri.EscapeDataString(category.Name)}")" 
                               href="@($"/category/{Uri.EscapeDataString(category.Name)}")"
                               @onclick="@(() => HandleNavigation(category.Name, null))" @onclick:preventDefault="true">
                                <span class="category-icon">📁</span>
                                @category.Name
                                <span class="feed-count">(@category.FeedUrls.Count)</span>
                            </a>
                        </div>
                        
                        <div class="nav-feeds">
                            @foreach (var feedUrl in category.FeedUrls)
                            {
                                var feedName = GetFeedDisplayName(feedUrl);
                                <div class="nav-item nav-feed-item">
                                    <a class="nav-link feed-link @GetActiveClass($"/feed/{Uri.EscapeDataString(feedUrl)}")" 
                                       href="@($"/feed/{Uri.EscapeDataString(feedUrl)}")"
                                       @onclick="@(() => HandleNavigation(null, feedUrl))" @onclick:preventDefault="true">
                                        <span class="feed-icon">📄</span>
                                        @feedName
                                    </a>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
            else if (!viewModel.IsLoading)
            {
                <div class="nav-item">
                    <div class="nav-link text-muted">
                        <span class="nav-icon">⚠️</span>
                        No feeds available
                    </div>
                </div>
            }
        </nav>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <div class="page-header">
            <div class="header-content">
                <h1 class="page-title">@viewModel.GetPageTitle()</h1>
                <p class="page-subtitle">@viewModel.GetPageSubtitle()</p>
            </div>
            @if (viewModel.Entries?.Any() == true)
            {
                <div class="header-stats">
                    <div class="stat-item">
                        <span class="stat-number">Page @(viewModel.CurrentPage + 1) of @viewModel.TotalPages</span>
                        <span class="stat-label">@viewModel.Entries.Count Articles</span>
                    </div>
                </div>
            }
        </div>

        @if (viewModel.IsLoading)
        {
            <div class="loading-container">
                <div class="loading-content">
                    <div class="spinner-border"></div>
                    <h3 class="loading-title">Fetching latest posts</h3>
                    <p class="loading-subtitle">This won't take long...</p>
                </div>
            </div>
        }
        else if (viewModel.ErrorMessage != null)
        {
            <div class="error-container">
                <div class="alert alert-error">
                    <div class="alert-header">
                        <span class="alert-icon">⚠️</span>
                        <h4 class="alert-title">Something went wrong</h4>
                    </div>
                    <p class="alert-message">@viewModel.ErrorMessage</p>
                    <button class="btn btn-secondary" @onclick="RetryLoad">
                        <span>🔄</span>
                        Try Again
                    </button>
                </div>
            </div>
        }
        else if (viewModel.Entries?.Any() == true && CurrentPageEntries.Any())
        {
            <div class="navigation-container">
                <div class="navigation-header">
                    <button class="btn btn-secondary nav-btn" @onclick="PreviousPage" disabled="@(viewModel.CurrentPage == 0)">
                        <span>⬅️</span>
                        Previous
                    </button>
                    
                    <div class="entry-counter">
                        <span class="current-entry">@(viewModel.CurrentPage + 1)</span>
                        <span class="separator">of</span>
                        <span class="total-entries">@viewModel.TotalPages</span>
                        <span class="page-label">Pages</span>
                    </div>
                    
                    <button class="btn btn-secondary nav-btn" @onclick="NextPage" disabled="@(viewModel.CurrentPage >= viewModel.TotalPages - 1)">
                        Next
                        <span>➡️</span>
                    </button>
                </div>

                <div class="feeds-grid">
                    @foreach (var entry in CurrentPageEntries)
                    {
                        <article class="feed-card">
                            <div class="date-tag">
                                <span class="date-month">@entry.PublishDate.ToString("MMM")</span>
                                <span class="date-day">@entry.PublishDate.Day</span>
                            </div>
                            <div class="card-body">
                                <h3 class="card-title">
                                    <a href="@entry.Link" target="_blank" rel="noopener noreferrer">
                                        @entry.Title
                                    </a>
                                </h3>

                                @if (!string.IsNullOrEmpty(entry.Description))
                                {
                                    <p class="card-text">
                                        @(TruncateDescription(entry.Description, 150))
                                    </p>
                                }

                                <div class="card-footer">
                                    <div class="source-tag">
                                        @if (!string.IsNullOrEmpty(entry.FaviconUrl))
                                        {
                                            <img src="@entry.FaviconUrl" 
                                                 alt="Site icon" 
                                                 class="site-favicon" 
                                                 data-domain="@ExtractDomain(entry.Link)"
                                                 data-fallback-icon="@(!string.IsNullOrEmpty(entry.FallbackIcon) ? entry.FallbackIcon : "🌐")"
                                                 onerror="handleFaviconError(this);" />
                                            <span class="site-icon" style="display: none;">@(!string.IsNullOrEmpty(entry.FallbackIcon) ? entry.FallbackIcon : "🌐")</span>
                                        }
                                        else if (!string.IsNullOrEmpty(entry.FallbackIcon))
                                        {
                                            <span class="site-icon">@entry.FallbackIcon</span>
                                        }
                                        else
                                        {
                                            <span class="site-icon">🌐</span>
                                        }
                                        <span>@entry.FeedDisplayName</span>
                                        @if (IsYouTubeEntry(entry))
                                        {
                                            <span class="platform-label">YouTube</span>
                                        }
                                    </div>
                                </div>
                            </div>
                        </article>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-content">
                    <div class="empty-icon">📚</div>
                    <h3 class="empty-title">No posts found</h3>
                    <p class="empty-subtitle">
                        Check back later for the latest updates from the .NET community.
                    </p>
                    <button class="btn btn-primary" @onclick="RetryLoad">
                        <span>🔄</span>
                        Refresh
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string? CategoryName { get; set; }
    [Parameter] public string? FeedUrl { get; set; }
    
    private HomeViewModel viewModel = new();
    private DotNetObjectReference<Home>? objRef;
    private const int entriesPerPage = 9;

    private List<FeedEntry> CurrentPageEntries => viewModel.GetCurrentPageEntries(entriesPerPage);

    protected override async Task OnInitializedAsync()
    {
        await LoadViewModel();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadViewModel();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("setupKeyboardNavigation", objRef);
        }
    }

    [JSInvokable]
    public async Task HandleKeyPress(string key)
    {
        switch (key)
        {
            case "ArrowLeft":
                await PreviousPage();
                break;
            case "ArrowRight":
                await NextPage();
                break;
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    private async Task LoadViewModel()
    {
        viewModel.IsLoading = true;
        StateHasChanged();
        
        viewModel = await HomePageService.GetHomeViewModelAsync(CategoryName, FeedUrl, 0);
        StateHasChanged();
    }

    private async Task RetryLoad()
    {
        await HomePageService.RefreshDataAsync();
        await LoadViewModel();
    }

    private async Task NextPage()
    {
        if (viewModel.CurrentPage < viewModel.TotalPages - 1)
        {
            viewModel = await HomePageService.GetHomeViewModelAsync(CategoryName, FeedUrl, viewModel.CurrentPage + 1);
            StateHasChanged();
        }
    }

    private async Task PreviousPage()
    {
        if (viewModel.CurrentPage > 0)
        {
            viewModel = await HomePageService.GetHomeViewModelAsync(CategoryName, FeedUrl, viewModel.CurrentPage - 1);
            StateHasChanged();
        }
    }

    private void HandleNavigation(string? categoryName, string? feedUrl)
    {
        CategoryName = categoryName;
        FeedUrl = feedUrl;
        
        // Update URL
        var url = BuildNavigationUrl(categoryName, feedUrl);
        Navigation.NavigateTo(url, false);
        
        // LoadViewModel will be called automatically by OnParametersSetAsync() when navigation completes
    }

    private string BuildNavigationUrl(string? categoryName, string? feedUrl)
    {
        if (!string.IsNullOrEmpty(feedUrl))
        {
            return $"/feed/{Uri.EscapeDataString(feedUrl)}";
        }
        else if (!string.IsNullOrEmpty(categoryName))
        {
            return $"/category/{Uri.EscapeDataString(categoryName)}";
        }
        return "/";
    }

    private string GetActiveClass(string href)
    {
        var currentUri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var targetUri = Navigation.ToAbsoluteUri(href);
        
        // For the home page, match exactly
        if (href == "/" && currentUri.PathAndQuery == "/")
        {
            return "active";
        }
        
        // For other pages, check if current path starts with the target path
        if (href != "/" && currentUri.PathAndQuery.StartsWith(targetUri.PathAndQuery, StringComparison.OrdinalIgnoreCase))
        {
            return "active";
        }
        
        return "";
    }

    private string GetFeedDisplayName(string feedUrl)
    {
        // Try to get the display name from cached metadata first
        if (viewModel.FeedMetadata != null && viewModel.FeedMetadata.TryGetValue(feedUrl, out var metadata))
        {
            return metadata.DisplayName;
        }

        // Fallback: look in entries from this feed for the display name
        if (viewModel.Entries != null)
        {
            var entriesFromFeed = viewModel.Entries.Where(e => e.FeedUrl == feedUrl).FirstOrDefault();
            if (entriesFromFeed != null && !string.IsNullOrWhiteSpace(entriesFromFeed.FeedDisplayName))
            {
                return entriesFromFeed.FeedDisplayName;
            }
        }

        // Final fallback to domain extraction if no metadata available
        try
        {
            var uri = new Uri(feedUrl);
            var host = uri.Host.ToLowerInvariant();
            if (host.StartsWith("www."))
                host = host[4..];
            return host;
        }
        catch
        {
            return "Unknown Feed";
        }
    }

    // Utility methods kept for display
    private static string TruncateDescription(string description, int maxLength)
    {
        if (string.IsNullOrEmpty(description) || description.Length <= maxLength)
            return description;

        // Remove HTML tags for display
        var plainText = System.Text.RegularExpressions.Regex.Replace(description, "<.*?>", "");

        if (plainText.Length <= maxLength)
            return plainText;

        var truncated = plainText.Substring(0, maxLength);
        var lastSpace = truncated.LastIndexOf(' ');

        if (lastSpace > 0)
            truncated = truncated.Substring(0, lastSpace);

        return truncated + "...";
    }

    private static bool IsYouTubeEntry(FeedEntry entry)
    {
        if (!string.IsNullOrEmpty(entry.Link))
        {
            return entry.Link.Contains("youtube.com", StringComparison.OrdinalIgnoreCase) ||
                   entry.Link.Contains("youtu.be", StringComparison.OrdinalIgnoreCase);
        }
        return false;
    }

    private static string ExtractDomain(string url)
    {
        if (string.IsNullOrEmpty(url))
            return "";

        try
        {
            var uri = new Uri(url);
            var host = uri.Host.ToLowerInvariant();
            
            // Remove www. prefix
            if (host.StartsWith("www."))
                host = host[4..];
                
            return host;
        }
        catch
        {
            return "";
        }
    }
}

<script>
    let keyboardNavigationSetup = false;
    let homeComponentRef = null;

    window.setupKeyboardNavigation = function(dotNetObjectReference) {
        homeComponentRef = dotNetObjectReference;
        
        if (!keyboardNavigationSetup) {
            document.addEventListener('keydown', handleKeyDown);
            keyboardNavigationSetup = true;
        }
    };

    function handleKeyDown(event) {
        // Only handle arrow keys if no input elements are focused
        if (document.activeElement.tagName === 'INPUT' || 
            document.activeElement.tagName === 'TEXTAREA' || 
            document.activeElement.contentEditable === 'true') {
            return;
        }

        if (event.key === 'ArrowLeft' || event.key === 'ArrowRight') {
            event.preventDefault();
            if (homeComponentRef) {
                homeComponentRef.invokeMethodAsync('HandleKeyPress', event.key);
            }
        }
    }

    window.handleFaviconError = function(img) {
        const domain = img.dataset.domain;
        const fallbackIcon = img.dataset.fallbackIcon || '🌐';
        
        // Track what we've already tried to avoid infinite loops
        const triedUrls = img.dataset.tried ? img.dataset.tried.split(',') : [];
        const currentSrc = img.src;
        
        if (!triedUrls.includes(currentSrc)) {
            triedUrls.push(currentSrc);
            img.dataset.tried = triedUrls.join(',');
        }
        
        // Only try one simple fallback - if favicon.ico fails, show emoji
        if (!triedUrls.includes(`https://${domain}/favicon.ico`)) {
            img.src = `https://${domain}/favicon.ico`;
        } else {
            // All fallbacks failed, switch to emoji icon
            img.style.display = 'none';
            const emojiSpan = img.nextElementSibling;
            if (emojiSpan && emojiSpan.classList.contains('site-icon')) {
                emojiSpan.style.display = 'inline';
            }
        }
    };
</script>