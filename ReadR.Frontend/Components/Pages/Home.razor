@page "/"
@using ReadR.Frontend.Services
@using ReadR.Frontend.Models
@using Microsoft.AspNetCore.Components.Web
@inject IFeedParser FeedParser
@rendermode InteractiveServer

<PageTitle>Latest Posts - ReadR</PageTitle>

<div class="page-header">
    <div class="header-content">
        <h1 class="page-title">Latest Posts</h1>
        <p class="page-subtitle">Stay up to date with the .NET community</p>
    </div>
    @if (feedEntries?.Any() == true)
    {
        <div class="header-stats">
            <div class="stat-item">
                <span class="stat-number">@feedEntries.Count</span>
                <span class="stat-label">Articles</span>
            </div>
        </div>
    }
</div>

@if (isLoading)
{
    <div class="loading-container">
        <div class="loading-content">
            <div class="spinner-border"></div>
            <h3 class="loading-title">Fetching latest posts</h3>
            <p class="loading-subtitle">This won't take long...</p>
        </div>
    </div>
}
else if (errorMessage != null)
{
    <div class="error-container">
        <div class="alert alert-error">
            <div class="alert-header">
                <span class="alert-icon">⚠️</span>
                <h4 class="alert-title">Something went wrong</h4>
            </div>
            <p class="alert-message">@errorMessage</p>
            <button class="btn btn-secondary" @onclick="RetryLoad">
                <span>🔄</span>
                Try Again
            </button>
        </div>
    </div>
}
else if (feedEntries?.Any() == true)
{
    <div class="feeds-grid">
        @foreach (var entry in feedEntries)
        {
            <article class="feed-card">
                <div class="card-body">
                    <h3 class="card-title">
                        <a href="@entry.Link" target="_blank" rel="noopener noreferrer">
                            @entry.Title
                        </a>
                    </h3>

                    @if (!string.IsNullOrEmpty(entry.Description))
                    {
                        <p class="card-text">
                            @(TruncateDescription(entry.Description, 150))
                        </p>
                    }

                    <div class="card-footer">
                        <div class="card-meta">
                            <div class="card-meta-item">
                                <span class="meta-icon">📅</span>
                                <span class="meta-text">@entry.PublishDate.ToString("MMM dd, yyyy")</span>
                            </div>

                            @if (!string.IsNullOrEmpty(entry.Author))
                            {
                                <div class="card-meta-item">
                                    <span class="meta-icon">👤</span>
                                    <span class="meta-text">@entry.Author</span>
                                </div>
                            }
                        </div>

                        <div class="feed-source">
                            <span class="source-icon">🌐</span>
                            <span class="source-text">@entry.FeedSource</span>
                        </div>
                    </div>
                </div>
            </article>
        }
    </div>
}
else
{
    <div class="empty-state">
        <div class="empty-content">
            <div class="empty-icon">📚</div>
            <h3 class="empty-title">No posts found</h3>
            <p class="empty-subtitle">
                Check back later for the latest updates from the .NET community.
            </p>
            <button class="btn btn-primary" @onclick="RetryLoad">
                <span>🔄</span>
                Refresh
            </button>
        </div>
    </div>
}

@code {
    private List<FeedEntry>? feedEntries;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadFeeds();
    }

    private async Task LoadFeeds()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            StateHasChanged();

            var allEntries = await FeedParser.ParseAllFeedsAsync();
            feedEntries = allEntries.Take(20).ToList();
        }
        catch (Exception)
        {
            errorMessage = "Unable to load feeds at this time. Please check your connection and try again.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RetryLoad()
    {
        await LoadFeeds();
    }

    private static string TruncateDescription(string description, int maxLength)
    {
        if (string.IsNullOrEmpty(description) || description.Length <= maxLength)
            return description;

        // Remove HTML tags for display
        var plainText = System.Text.RegularExpressions.Regex.Replace(description, "<.*?>", "");

        if (plainText.Length <= maxLength)
            return plainText;

        var truncated = plainText.Substring(0, maxLength);
        var lastSpace = truncated.LastIndexOf(' ');

        if (lastSpace > 0)
            truncated = truncated.Substring(0, lastSpace);

        return truncated + "...";
    }
}