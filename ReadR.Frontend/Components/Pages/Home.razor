@page "/"
@using ReadR.Frontend.Services
@using ReadR.Frontend.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject IFeedParser FeedParser
@inject IJSRuntime JSRuntime
@implements IDisposable
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Latest Posts - ReadR</PageTitle>

<div class="page-header">
    <div class="header-content">
        <h1 class="page-title">Latest Posts</h1>
        <p class="page-subtitle">Stay up to date with the .NET community</p>
    </div>
    @if (feedEntries?.Any() == true)
    {
        <div class="header-stats">
            <div class="stat-item">
                <span class="stat-number">Page @(currentPage + 1) of @totalPages</span>
                <span class="stat-label">@feedEntries.Count Articles</span>
            </div>
        </div>
    }
</div>

@if (isLoading)
{
    <div class="loading-container">
        <div class="loading-content">
            <div class="spinner-border"></div>
            <h3 class="loading-title">Fetching latest posts</h3>
            <p class="loading-subtitle">This won't take long...</p>
        </div>
    </div>
}
else if (errorMessage != null)
{
    <div class="error-container">
        <div class="alert alert-error">
            <div class="alert-header">
                <span class="alert-icon">⚠️</span>
                <h4 class="alert-title">Something went wrong</h4>
            </div>
            <p class="alert-message">@errorMessage</p>
            <button class="btn btn-secondary" @onclick="RetryLoad">
                <span>🔄</span>
                Try Again
            </button>
        </div>
    </div>
}
else if (feedEntries?.Any() == true && CurrentPageEntries.Any())
{
    <div class="navigation-container">
        <div class="navigation-header">
            <button class="btn btn-secondary nav-btn" @onclick="PreviousPage" disabled="@(currentPage == 0)">
                <span>⬅️</span>
                Previous
            </button>
            
            <div class="entry-counter">
                <span class="current-entry">@(currentPage + 1)</span>
                <span class="separator">of</span>
                <span class="total-entries">@totalPages</span>
                <span class="page-label">Pages</span>
            </div>
            
            <button class="btn btn-secondary nav-btn" @onclick="NextPage" disabled="@(currentPage >= totalPages - 1)">
                Next
                <span>➡️</span>
            </button>
        </div>

        <div class="feeds-grid">
            @foreach (var entry in CurrentPageEntries)
            {
                <article class="feed-card">
                    <div class="date-tag">
                        <span class="date-month">@entry.PublishDate.ToString("MMM")</span>
                        <span class="date-day">@entry.PublishDate.Day</span>
                    </div>
                    <div class="card-body">
                        <h3 class="card-title">
                            <a href="@entry.Link" target="_blank" rel="noopener noreferrer">
                                @entry.Title
                            </a>
                        </h3>

                        @if (!string.IsNullOrEmpty(entry.Description))
                        {
                            <p class="card-text">
                                @(TruncateDescription(entry.Description, 150))
                            </p>
                        }

                        <div class="card-footer">
                            <div class="source-tag">
                                @if (!string.IsNullOrEmpty(entry.FaviconUrl))
                                {
                                    <img src="@entry.FaviconUrl" 
                                         alt="Site icon" 
                                         class="site-favicon" 
                                         data-domain="@ExtractDomain(entry.Link)"
                                         data-fallback-icon="@(!string.IsNullOrEmpty(entry.FallbackIcon) ? entry.FallbackIcon : "🌐")"
                                         onerror="handleFaviconError(this);" />
                                    <span class="site-icon" style="display: none;">@(!string.IsNullOrEmpty(entry.FallbackIcon) ? entry.FallbackIcon : "🌐")</span>
                                }
                                else if (!string.IsNullOrEmpty(entry.FallbackIcon))
                                {
                                    <span class="site-icon">@entry.FallbackIcon</span>
                                }
                                else
                                {
                                    <span class="site-icon">🌐</span>
                                }
                                <span>@entry.FeedSource</span>
                                @if (IsYouTubeEntry(entry))
                                {
                                    <span class="platform-label">YouTube</span>
                                }
                            </div>
                        </div>
                    </div>
                </article>
            }
        </div>
    </div>
}
else
{
    <div class="empty-state">
        <div class="empty-content">
            <div class="empty-icon">📚</div>
            <h3 class="empty-title">No posts found</h3>
            <p class="empty-subtitle">
                Check back later for the latest updates from the .NET community.
            </p>
            <button class="btn btn-primary" @onclick="RetryLoad">
                <span>🔄</span>
                Refresh
            </button>
        </div>
    </div>
}

@code {
    private List<FeedEntry>? feedEntries;
    private bool isLoading = true;
    private string? errorMessage;
    private int currentPage = 0;
    private const int entriesPerPage = 9;
    private DotNetObjectReference<Home>? objRef;

    private int totalPages => feedEntries?.Count > 0 ? (int)Math.Ceiling((double)feedEntries.Count / entriesPerPage) : 0;
    private List<FeedEntry> CurrentPageEntries => feedEntries?
        .Skip(currentPage * entriesPerPage)
        .Take(entriesPerPage)
        .ToList() ?? new List<FeedEntry>();

    protected override async Task OnInitializedAsync()
    {
        await LoadFeeds();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("setupKeyboardNavigation", objRef);
        }
    }

    [JSInvokable]
    public void HandleKeyPress(string key)
    {
        switch (key)
        {
            case "ArrowLeft":
                PreviousPage();
                break;
            case "ArrowRight":
                NextPage();
                break;
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    private async Task LoadFeeds()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            StateHasChanged();

            var allEntries = await FeedParser.ParseAllFeedsAsync();
            feedEntries = allEntries.ToList();
            currentPage = 0; // Reset to first page
        }
        catch (Exception)
        {
            errorMessage = "Unable to load feeds at this time. Please check your connection and try again.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RetryLoad()
    {
        await LoadFeeds();
    }

    private void NextPage()
    {
        if (currentPage < totalPages - 1)
        {
            currentPage++;
            StateHasChanged();
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 0)
        {
            currentPage--;
            StateHasChanged();
        }
    }

    private static string TruncateDescription(string description, int maxLength)
    {
        if (string.IsNullOrEmpty(description) || description.Length <= maxLength)
            return description;

        // Remove HTML tags for display
        var plainText = System.Text.RegularExpressions.Regex.Replace(description, "<.*?>", "");

        if (plainText.Length <= maxLength)
            return plainText;

        var truncated = plainText.Substring(0, maxLength);
        var lastSpace = truncated.LastIndexOf(' ');

        if (lastSpace > 0)
            truncated = truncated.Substring(0, lastSpace);

        return truncated + "...";
    }

    private static bool IsYouTubeEntry(FeedEntry entry)
    {
        // Check if the link contains YouTube domains
        if (!string.IsNullOrEmpty(entry.Link))
        {
            return entry.Link.Contains("youtube.com", StringComparison.OrdinalIgnoreCase) ||
                   entry.Link.Contains("youtu.be", StringComparison.OrdinalIgnoreCase);
        }
        
        return false;
    }

    private static string ExtractDomain(string url)
    {
        if (string.IsNullOrEmpty(url))
            return "";

        try
        {
            var uri = new Uri(url);
            var host = uri.Host.ToLowerInvariant();
            
            // Remove www. prefix
            if (host.StartsWith("www."))
                host = host[4..];
                
            return host;
        }
        catch
        {
            return "";
        }
    }
}

<script>
    let keyboardNavigationSetup = false;
    let homeComponentRef = null;

    window.setupKeyboardNavigation = function(dotNetObjectReference) {
        homeComponentRef = dotNetObjectReference;
        
        if (!keyboardNavigationSetup) {
            document.addEventListener('keydown', handleKeyDown);
            keyboardNavigationSetup = true;
        }
    };

    function handleKeyDown(event) {
        // Only handle arrow keys if no input elements are focused
        if (document.activeElement.tagName === 'INPUT' || 
            document.activeElement.tagName === 'TEXTAREA' || 
            document.activeElement.contentEditable === 'true') {
            return;
        }

        if (event.key === 'ArrowLeft' || event.key === 'ArrowRight') {
            event.preventDefault();
            if (homeComponentRef) {
                homeComponentRef.invokeMethodAsync('HandleKeyPress', event.key);
            }
        }
    }

    window.handleFaviconError = function(img) {
        const domain = img.dataset.domain;
        const fallbackIcon = img.dataset.fallbackIcon || '🌐';
        
        // Track what we've already tried to avoid infinite loops
        const triedUrls = img.dataset.tried ? img.dataset.tried.split(',') : [];
        const currentSrc = img.src;
        
        if (!triedUrls.includes(currentSrc)) {
            triedUrls.push(currentSrc);
            img.dataset.tried = triedUrls.join(',');
        }
        
        // Define fallback URLs in order of preference
        const fallbackUrls = [
            `https://${domain}/apple-touch-icon.png`,
            `https://${domain}/apple-touch-icon-180x180.png`,
            `https://${domain}/favicon.png`,
            `https://${domain}/favicon-32x32.png`,
            `https://${domain}/assets/favicon.ico`,
            `https://${domain}/images/favicon.ico`,
            `https://${domain}/img/favicon.ico`,
            `https://www.google.com/s2/favicons?domain=${domain}&sz=32`
        ];
        
        // Find the next untried URL
        let nextUrl = null;
        for (const url of fallbackUrls) {
            if (!triedUrls.includes(url)) {
                nextUrl = url;
                break;
            }
        }
        
        if (nextUrl) {
            // Try the next fallback URL
            img.src = nextUrl;
        } else {
            // All image fallbacks failed, switch to emoji icon
            img.style.display = 'none';
            const emojiSpan = img.nextElementSibling;
            if (emojiSpan && emojiSpan.classList.contains('site-icon')) {
                emojiSpan.style.display = 'inline';
            }
        }
    };
    
    // Preload Google's favicon service for better performance
    window.addEventListener('DOMContentLoaded', function() {
        const link = document.createElement('link');
        link.rel = 'dns-prefetch';
        link.href = '//www.google.com';
        document.head.appendChild(link);
    });
</script>