@page "/"
@using ReadR.Frontend.Services
@using ReadR.Frontend.Models
@inject IFeedParser FeedParser
@attribute [StreamRendering]

<PageTitle>ReadR - Latest Posts</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h1 class="display-4 text-primary mb-2">ReadR</h1>
            <p class="lead text-muted">Latest posts from the .NET community</p>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="row">
            <div class="col text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3 text-muted">Fetching the latest posts...</p>
            </div>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="row">
            <div class="col">
                <div class="alert alert-warning" role="alert">
                    <h4 class="alert-heading">Oops!</h4>
                    <p class="mb-0">@errorMessage</p>
                </div>
            </div>
        </div>
    }
    else if (feedEntries?.Any() == true)
    {
        <div class="row mb-3">
            <div class="col">
                <h5 class="text-muted">
                    <i class="bi bi-rss-fill me-2"></i>
                    Latest Posts (@feedEntries.Count)
                </h5>
            </div>
        </div>

        <div class="row g-4 equal-height-cards">
            @foreach (var entry in feedEntries)
            {
                <div class="col-md-6 col-lg-4">
                    <div class="card shadow-sm feed-card">
                        <div class="card-body">
                            <h6 class="card-title mb-3">
                                <a href="@entry.Link" target="_blank" class="text-decoration-none text-dark fw-bold stretched-link">
                                    @entry.Title
                                </a>
                            </h6>

                            @if (!string.IsNullOrEmpty(entry.Description))
                            {
                                <p class="card-text text-muted small mb-3">
                                    @(TruncateDescription(entry.Description, 120))
                                </p>
                            }

                            <div class="mt-auto">
                                <div class="d-flex flex-wrap align-items-center gap-2 small text-muted mb-2">
                                    <span>
                                        <i class="bi bi-calendar3 me-1"></i>
                                        @entry.PublishDate.ToString("MMM dd")
                                    </span>

                                    @if (!string.IsNullOrEmpty(entry.Author))
                                    {
                                        <span>
                                            <i class="bi bi-person me-1"></i>
                                            @entry.Author
                                        </span>
                                    }
                                </div>

                                <div class="d-flex justify-content-between align-items-center">
                                    <small class="text-muted">
                                        <i class="bi bi-globe me-1"></i>
                                        @entry.FeedSource
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="row">
            <div class="col text-center py-5">
                <i class="bi bi-rss display-1 text-muted"></i>
                <h4 class="mt-3 text-muted">No posts found</h4>
                <p class="text-muted">Check back later for the latest updates from the .NET community.</p>
            </div>
        </div>
    }
</div>

@code {
    private List<FeedEntry>? feedEntries;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var allEntries = await FeedParser.ParseAllFeedsAsync();
            feedEntries = allEntries.Take(20).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = "Unable to load feeds at this time. Please try again later.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private static string TruncateDescription(string description, int maxLength)
    {
        if (string.IsNullOrEmpty(description) || description.Length <= maxLength)
            return description;

        // Remove HTML tags for display
        var plainText = System.Text.RegularExpressions.Regex.Replace(description, "<.*?>", "");

        if (plainText.Length <= maxLength)
            return plainText;

        var truncated = plainText.Substring(0, maxLength);
        var lastSpace = truncated.LastIndexOf(' ');

        if (lastSpace > 0)
            truncated = truncated.Substring(0, lastSpace);

        return truncated + "...";
    }
}