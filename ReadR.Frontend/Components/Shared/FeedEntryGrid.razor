@using ReadR.Frontend.Models

<div class="feeds-grid">
    @foreach (var entry in Entries)
    {
        <article class="feed-card">
            <div class="date-tag">
                <span class="date-month">@entry.PublishDate.ToString("MMM")</span>
                <span class="date-day">@entry.PublishDate.Day</span>
            </div>
            <div class="card-body">
                <h3 class="card-title">
                    <a href="@entry.Link" target="_blank" rel="noopener noreferrer">
                        @entry.Title
                    </a>
                </h3>

                @if (!string.IsNullOrEmpty(entry.Description))
                {
                    <p class="card-text">
                        @(TruncateDescription(entry.Description, 150))
                    </p>
                }

                <div class="card-footer">
                    <div class="source-tag">
                        @if (!string.IsNullOrEmpty(entry.FaviconUrl))
                        {
                            <img src="@entry.FaviconUrl" 
                                 alt="Site icon" 
                                 class="site-favicon" 
                                 data-domain="@ExtractDomain(entry.Link)"
                                 data-fallback-icon="@(!string.IsNullOrEmpty(entry.FallbackIcon) ? entry.FallbackIcon : "üåê")"
                                 onerror="handleFaviconError(this);" />
                            <span class="site-icon" style="display: none;">@(!string.IsNullOrEmpty(entry.FallbackIcon) ? entry.FallbackIcon : "üåê")</span>
                        }
                        else if (!string.IsNullOrEmpty(entry.FallbackIcon))
                        {
                            <span class="site-icon">@entry.FallbackIcon</span>
                        }
                        else
                        {
                            <span class="site-icon">üåê</span>
                        }
                        <span>@entry.FeedDisplayName</span>
                        @if (IsYouTubeEntry(entry))
                        {
                            <span class="platform-label">YouTube</span>
                        }
                    </div>
                </div>
            </div>
        </article>
    }
</div>

@code {
    [Parameter, EditorRequired] public List<FeedEntry> Entries { get; set; } = new();

    private static string TruncateDescription(string description, int maxLength)
    {
        if (string.IsNullOrEmpty(description) || description.Length <= maxLength)
            return description;

        // Remove HTML tags for display
        var plainText = System.Text.RegularExpressions.Regex.Replace(description, "<.*?>", "");

        if (plainText.Length <= maxLength)
            return plainText;

        var truncated = plainText.Substring(0, maxLength);
        var lastSpace = truncated.LastIndexOf(' ');

        if (lastSpace > 0)
            truncated = truncated.Substring(0, lastSpace);

        return truncated + "...";
    }

    private static bool IsYouTubeEntry(FeedEntry entry)
    {
        if (!string.IsNullOrEmpty(entry.Link))
        {
            return entry.Link.Contains("youtube.com", StringComparison.OrdinalIgnoreCase) ||
                   entry.Link.Contains("youtu.be", StringComparison.OrdinalIgnoreCase);
        }
        return false;
    }

    private static string ExtractDomain(string url)
    {
        if (string.IsNullOrEmpty(url))
            return "";

        try
        {
            var uri = new Uri(url);
            var host = uri.Host.ToLowerInvariant();
            
            // Remove www. prefix
            if (host.StartsWith("www."))
                host = host[4..];
                
            return host;
        }
        catch
        {
            return "";
        }
    }
}
